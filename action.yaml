name: build
description: add item to project
inputs:
  username:
    default: YoshinoriSatoh
  gh_token:
    require: true
  issue_node_id:
    require: true
runs:
  using: "composite"
  steps:
    - name: Get project data
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
        USERNAME: YoshinoriSatoh
        PROJECT_NUMBER: 10
      run: |
        gh api graphql -f query='
          query($username: String!, $number: Int!) {
            user(login: $username){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f username=$USERNAME -F number=$PROJECT_NUMBER > project_data.json

        echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
        echo 'DATE_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
        echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV

    - name: Add Issue to project
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
        ISSUE_ID: ${{ inputs.issue_node_id }}
      run: |
        item_id="$( gh api graphql -f query='
          mutation($project:ID!, $issue:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

    - name: Get date
      run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

    - name: Set fields
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      run: |
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
            $date_field: ID!
            $date_value: Date!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: { 
                singleSelectOptionId: $status_value
                }
            }) {
              projectV2Item {
                id
                }
            }
            set_date_posted: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $date_field
              value: { 
                date: $date_value
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent